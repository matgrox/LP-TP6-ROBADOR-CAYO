/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package dev.labintec.frontend.Tramite.mdi;

import com.fasterxml.jackson.core.JsonProcessingException;
import dev.labintec.frontend.Tramite.cliente.ClienteRequestTransaction;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.awt.Frame;
import java.awt.Window;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;

/**
 *
 * @author matgr
 */
public class iFTablaTramite extends javax.swing.JInternalFrame {
    private iFTablaTramite existencia;
    private boolean soloNumeros = false;
    private boolean soloLetras = true;
    private boolean estado = false;
    /**
     * Creates new form iFtablaTramite
     */
    public iFTablaTramite() {
        initComponents();
        tableTramite.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        existencia=this;
        inicio();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupQuery = new javax.swing.ButtonGroup();
        jDialogEdicion = new javax.swing.JDialog();
        panelSecundario = new javax.swing.JPanel();
        lableDatoEstado = new javax.swing.JLabel();
        textFieldEstado = new javax.swing.JTextField();
        jCheckBoxEstado = new javax.swing.JCheckBox();
        jCheckBoxTipo = new javax.swing.JCheckBox();
        labelDatoTipo = new javax.swing.JLabel();
        textFieldTipo = new javax.swing.JTextField();
        buttonGuardar = new javax.swing.JButton();
        buttonCancelar = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanelQuery = new javax.swing.JPanel();
        textFieldCampo = new javax.swing.JTextField();
        checkBoxtTipo = new javax.swing.JCheckBox();
        checkBoxEstado = new javax.swing.JCheckBox();
        checkBoxId = new javax.swing.JCheckBox();
        buttonListar = new javax.swing.JButton();
        buttonListarTodos = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        buttonAgregar = new javax.swing.JButton();
        buttonEditar = new javax.swing.JButton();
        buttonEliminar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableTramite = new javax.swing.JTable();

        panelSecundario.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Edicion"));
        panelSecundario.setPreferredSize(new java.awt.Dimension(300, 190));

        lableDatoEstado.setText("(*)Estado:");

        textFieldEstado.setToolTipText("Estado del tramite selecionado");
        textFieldEstado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textFieldEstadoKeyReleased(evt);
            }
        });

        buttonGroup1.add(jCheckBoxEstado);
        jCheckBoxEstado.setText("Estado");
        jCheckBoxEstado.setToolTipText("Solo se pude editar un campo a la vez");
        jCheckBoxEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxEstadoActionPerformed(evt);
            }
        });

        buttonGroup1.add(jCheckBoxTipo);
        jCheckBoxTipo.setText("Tipo");
        jCheckBoxTipo.setToolTipText("Solo se pude editar un campo a la vez");
        jCheckBoxTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxTipoActionPerformed(evt);
            }
        });

        labelDatoTipo.setText("(*)Tipo:");

        textFieldTipo.setToolTipText("Tipo del tramite selecionado");
        textFieldTipo.setEnabled(false);
        textFieldTipo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textFieldTipoKeyReleased(evt);
            }
        });

        buttonGuardar.setText("Guardar");
        buttonGuardar.setToolTipText("Guardar edicion");
        buttonGuardar.setEnabled(false);
        buttonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGuardarActionPerformed(evt);
            }
        });

        buttonCancelar.setText("Cancelar");
        buttonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSecundarioLayout = new javax.swing.GroupLayout(panelSecundario);
        panelSecundario.setLayout(panelSecundarioLayout);
        panelSecundarioLayout.setHorizontalGroup(
            panelSecundarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSecundarioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSecundarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSecundarioLayout.createSequentialGroup()
                        .addGroup(panelSecundarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lableDatoEstado)
                            .addComponent(labelDatoTipo))
                        .addGap(18, 18, 18)
                        .addGroup(panelSecundarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textFieldEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textFieldTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelSecundarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 8, Short.MAX_VALUE))
                    .addGroup(panelSecundarioLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(buttonCancelar)
                        .addGap(18, 18, 18)
                        .addComponent(buttonGuardar)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        panelSecundarioLayout.setVerticalGroup(
            panelSecundarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSecundarioLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelSecundarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lableDatoEstado)
                    .addComponent(jCheckBoxEstado))
                .addGap(16, 16, 16)
                .addGroup(panelSecundarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDatoTipo)
                    .addComponent(textFieldTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxTipo))
                .addGap(18, 18, 18)
                .addGroup(panelSecundarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonGuardar)
                    .addComponent(buttonCancelar))
                .addGap(57, 57, 57))
        );

        javax.swing.GroupLayout jDialogEdicionLayout = new javax.swing.GroupLayout(jDialogEdicion.getContentPane());
        jDialogEdicion.getContentPane().setLayout(jDialogEdicionLayout);
        jDialogEdicionLayout.setHorizontalGroup(
            jDialogEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogEdicionLayout.createSequentialGroup()
                .addComponent(panelSecundario, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                .addContainerGap())
        );
        jDialogEdicionLayout.setVerticalGroup(
            jDialogEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelSecundario, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
        );

        jPanelQuery.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Consultas"));
        jPanelQuery.setToolTipText("");

        textFieldCampo.setToolTipText("ingrese dato para realizar consulta");
        textFieldCampo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textFieldCampoKeyReleased(evt);
            }
        });

        buttonGroupQuery.add(checkBoxtTipo);
        checkBoxtTipo.setText("Tipo");
        checkBoxtTipo.setToolTipText("Filtrar por tipo de tramite");
        checkBoxtTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxtTipoActionPerformed(evt);
            }
        });

        buttonGroupQuery.add(checkBoxEstado);
        checkBoxEstado.setText("Estado");
        checkBoxEstado.setToolTipText("Filtrar por estado de tramite");
        checkBoxEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxEstadoActionPerformed(evt);
            }
        });

        buttonGroupQuery.add(checkBoxId);
        checkBoxId.setText("ID");
        checkBoxId.setToolTipText("Filtrar por ID del tramite");
        checkBoxId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxIdActionPerformed(evt);
            }
        });

        buttonListar.setText("Listar");
        buttonListar.setToolTipText("Listar por dato especificado");
        buttonListar.setEnabled(false);
        buttonListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonListarActionPerformed(evt);
            }
        });

        buttonListarTodos.setText("Listar Todos");
        buttonListarTodos.setToolTipText("Listar todos los Tramites");
        buttonListarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonListarTodosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelQueryLayout = new javax.swing.GroupLayout(jPanelQuery);
        jPanelQuery.setLayout(jPanelQueryLayout);
        jPanelQueryLayout.setHorizontalGroup(
            jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelQueryLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(textFieldCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(checkBoxtTipo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkBoxEstado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkBoxId)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonListar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonListarTodos)
                .addGap(106, 106, 106))
        );
        jPanelQueryLayout.setVerticalGroup(
            jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelQueryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldCampo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkBoxId)
                    .addComponent(checkBoxEstado)
                    .addComponent(checkBoxtTipo)
                    .addComponent(buttonListar)
                    .addComponent(buttonListarTodos))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Creacion/ Edicion/Eliminacion"));

        buttonAgregar.setText("Agregar");
        buttonAgregar.setToolTipText("Agregrar Tramite");
        buttonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAgregarActionPerformed(evt);
            }
        });

        buttonEditar.setText("Editar");
        buttonEditar.setToolTipText("Selecione tramite a editar");
        buttonEditar.setEnabled(false);
        buttonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditarActionPerformed(evt);
            }
        });

        buttonEliminar.setText("Eliminar");
        buttonEliminar.setToolTipText("Seleccione tramite a eliminar");
        buttonEliminar.setEnabled(false);
        buttonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(buttonAgregar)
                .addGap(18, 18, 18)
                .addComponent(buttonEditar)
                .addGap(18, 18, 18)
                .addComponent(buttonEliminar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAgregar)
                    .addComponent(buttonEditar)
                    .addComponent(buttonEliminar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tableTramite.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Tipo", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableTramite.setName(""); // NOI18N
        tableTramite.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableTramiteMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tableTramite);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanelQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelQuery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void mostrar() {
        DefaultTableModel modelo = (DefaultTableModel) tableTramite.getModel();
        this.setVisible(true);
        this.setSize(this.getParent().getSize()); // Ajusta el tamaño
        this.setLocation(0, 0);
        checkBoxtTipo.setSelected(true);
        validacionTextField();
    }
    private void checkBoxtTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxtTipoActionPerformed
        limpiar();
        estado = false;
        validacionTextField();
    }//GEN-LAST:event_checkBoxtTipoActionPerformed

    private void checkBoxEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxEstadoActionPerformed
        limpiar();
        estado = false;
        validacionTextField();
    }//GEN-LAST:event_checkBoxEstadoActionPerformed

    private void checkBoxIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxIdActionPerformed
        estado = true;
        limpiar();
        validacionTextField();

    }//GEN-LAST:event_checkBoxIdActionPerformed

    private void textFieldCampoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldCampoKeyReleased
        deshabilitarBotonesLista();
    }//GEN-LAST:event_textFieldCampoKeyReleased

    private void buttonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAgregarActionPerformed
        Window ventanaPadre = SwingUtilities.getWindowAncestor(this);

    if (ventanaPadre instanceof Frame) {
        DialgNuevoTramite agregar = new DialgNuevoTramite((Frame) ventanaPadre, true,existencia);
        agregar.setLocationRelativeTo(ventanaPadre); // opcional: centra el diálogo
        agregar.setVisible(true);                     // muestra de forma bloqueante


        
    }//GEN-LAST:event_buttonAgregarActionPerformed
    }
    private void buttonListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonListarActionPerformed
        this.setSize(400, 140);
        if (checkBoxEstado.isSelected()) {
            String response = ClienteRequestTransaction.requestTransactionObtenerPorEstado(textFieldCampo.getText());
            cargarTabla(response);
        }
        if (checkBoxtTipo.isSelected()) {
            String response = ClienteRequestTransaction.requestTransactionObtenerPorTipo(textFieldCampo.getText());
            cargarTabla(response);
        }
        if (checkBoxId.isSelected()) {
            int id = Integer.parseInt(textFieldCampo.getText());
            String response = ClienteRequestTransaction.requestTransactionObtenerPorid(id);
            cargarUnElemento(response);
        }

    }//GEN-LAST:event_buttonListarActionPerformed

    private void buttonListarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonListarTodosActionPerformed
        try {
            String response = ClienteRequestTransaction.requestTransactionObtenerTodas();
            cargarTabla(response);
        } catch (Exception ex) {

        }
    }//GEN-LAST:event_buttonListarTodosActionPerformed

    private void buttonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditarActionPerformed
        soloLetras = true;
        jDialogEdicion.setModal(true);
        jDialogEdicion.setResizable(false);
        jDialogEdicion.setSize(300, 220);
        jDialogEdicion.setLocationRelativeTo(this);
        jCheckBoxEstado.setSelected(true);
         actualizarTextfield();
        jDialogEdicion.setVisible(true);
       

    }//GEN-LAST:event_buttonEditarActionPerformed
    
    private void buttonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEliminarActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tableTramite.getModel();
        int selectedRow = tableTramite.getSelectedRow();
        Object value = tableTramite.getValueAt(selectedRow, 0);
        int id = Integer.parseInt(value.toString());
        int opcion = JOptionPane.showConfirmDialog(this, "¿Esta Seguro?", "Desea Eliminar el Tramite", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
        if (opcion == 0) {
            ClienteRequestTransaction.requestTransactionEliminarPorid(id);
            modelo.removeRow(selectedRow);
            deshabilitarBotones();
        }
    }//GEN-LAST:event_buttonEliminarActionPerformed

    private void buttonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGuardarActionPerformed
        int selectedRow = tableTramite.getSelectedRow();
        Object value = tableTramite.getValueAt(selectedRow, 0);
        int id = Integer.parseInt(value.toString());
        if (jCheckBoxEstado.isSelected()) {
            String respuesta = ClienteRequestTransaction.requestTransactionActualizarEstado(id, textFieldEstado.getText());
            jDialogEdicion.dispose();
        } else {
            String respuesta = ClienteRequestTransaction.requestTransactionActualizarTipo(id, textFieldTipo.getText());
            jDialogEdicion.dispose();
        }
        inicio();
    }//GEN-LAST:event_buttonGuardarActionPerformed

    private void textFieldEstadoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldEstadoKeyReleased
        deshabilitarBotonGuardar();
    }//GEN-LAST:event_textFieldEstadoKeyReleased

    private void textFieldTipoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldTipoKeyReleased
        deshabilitarBotonGuardar();
    }//GEN-LAST:event_textFieldTipoKeyReleased

    private void jCheckBoxEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxEstadoActionPerformed
        actualizarTextfield();
    }//GEN-LAST:event_jCheckBoxEstadoActionPerformed

    private void jCheckBoxTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxTipoActionPerformed
        actualizarTextfield();
    }//GEN-LAST:event_jCheckBoxTipoActionPerformed

    private void buttonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelarActionPerformed
        jDialogEdicion.dispose();
    }//GEN-LAST:event_buttonCancelarActionPerformed

    private void tableTramiteMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableTramiteMousePressed
        buttonEditar.setEnabled(true);
        buttonEliminar.setEnabled(true);
    }//GEN-LAST:event_tableTramiteMousePressed
    private void actualizarFiltro() {
        soloNumeros = checkBoxId.isSelected();
        soloLetras = checkBoxtTipo.isSelected() || checkBoxEstado.isSelected();
    }

    private void validacionTextField() {
        DocumentFilter filtro = new DocumentFilter() {
            @Override
            public void insertString(DocumentFilter.FilterBypass fb, int offset, String string, AttributeSet attr) throws BadLocationException {
                actualizarFiltro();
                if (validar(string)) {
                    super.insertString(fb, offset, string, attr);
                }
            }

            @Override
            public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String string, AttributeSet attrs) throws BadLocationException {
                actualizarFiltro();
                if (validar(string)) {
                    super.replace(fb, offset, length, string, attrs);
                }
            }

            private boolean validar(String texto) {
                if (texto.isEmpty()) {
                    return true;
                }
                if (soloNumeros) {
                    return texto.matches("[0-9]+");
                }
                if (soloLetras) {
                    return texto.matches("[a-zA-Z]+");
                }
                return true; // Si nada está seleccionado, permite todo
            }
        };

        ((AbstractDocument) textFieldCampo.getDocument()).setDocumentFilter(filtro);
        ((AbstractDocument) textFieldEstado.getDocument()).setDocumentFilter(filtro);
        deshabilitarBotonesLista();
    }

    private void limpiar() {
        if (estado) {
            textFieldCampo.setText("");
        }
    }

    private void cargarTabla(String json) {
        try {
            ObjectMapper mapper = new ObjectMapper();
            List<Map<String, Object>> lista = mapper.readValue(json, new TypeReference<>() {
            });
            DefaultTableModel modelo = (DefaultTableModel) tableTramite.getModel();
            modelo.setRowCount(0); // Esto sí funciona: elimina todas las filas
            // Usa este método si es una lista
            for (Map<String, Object> fila : lista) {
                Object id = fila.get("codtransaction");
                Object tipo = fila.get("tipo");
                Object estado = fila.get("estado");

                modelo.addRow(new Object[]{id, tipo, estado});
            }
            // UUsa este método si es un objeto único                    
        } catch (JsonProcessingException ex) {
            Logger.getLogger(iFTablaTramite.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void cargarUnElemento(String json) {
        DefaultTableModel modelo = (DefaultTableModel) tableTramite.getModel();
        modelo.setRowCount(0); // Esto sí funciona: elimina todas las filas
        try {
            ObjectMapper mapper = new ObjectMapper();
            Map<String, Object> fila;
            fila = mapper.readValue(json, new TypeReference<>() {
            });
            Object id = fila.get("codtransaction");
            Object tipo = fila.get("tipo");
            Object estado = fila.get("estado");
            modelo.addRow(new Object[]{id, tipo, estado});
        } catch (JsonProcessingException ex) {
            Logger.getLogger(iFTablaTramite.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void deshabilitarBotones() {
        buttonEditar.setEnabled(false);
        buttonEliminar.setEnabled(false);
    }

    private void deshabilitarBotonesLista() {
        if (textFieldCampo.getText().isEmpty()) {
            buttonListarTodos.setEnabled(true);
        } else {
            buttonListarTodos.setEnabled(false);
        }
        if (textFieldCampo.getText().isEmpty()) {
            buttonListar.setEnabled(false);
        } else {
            buttonListar.setEnabled(true);
        }
    }

    private void deshabilitarBotonGuardar() {
        boolean hayTexto = !textFieldEstado.getText().trim().isEmpty() || !textFieldTipo.getText().trim().isEmpty();
        buttonGuardar.setEnabled(hayTexto);
    }

    public void inicio() {
        
        String response = ClienteRequestTransaction.requestTransactionObtenerTodas();
        cargarTabla(response);
        
    }

    private void actualizarTextfield() {
        if (jCheckBoxEstado.isSelected()) {
            textFieldTipo.setEnabled(false);
            textFieldTipo.setText("");
            int selectedRow = tableTramite.getSelectedRow();
            Object value = tableTramite.getValueAt(selectedRow, 2);
            textFieldEstado.setText(value.toString());
            textFieldEstado.setEnabled(true);
            buttonGuardar.setEnabled(false);
        } else {
            textFieldEstado.setEnabled(false);
            textFieldEstado.setText("");
            int selectedRow = tableTramite.getSelectedRow();
            Object value = tableTramite.getValueAt(selectedRow, 1);
            textFieldTipo.setText(value.toString());
            textFieldTipo.setEnabled(true);
            buttonGuardar.setEnabled(false);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAgregar;
    private javax.swing.JButton buttonCancelar;
    private javax.swing.JButton buttonEditar;
    private javax.swing.JButton buttonEliminar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroupQuery;
    private javax.swing.JButton buttonGuardar;
    private javax.swing.JButton buttonListar;
    private javax.swing.JButton buttonListarTodos;
    private javax.swing.JCheckBox checkBoxEstado;
    private javax.swing.JCheckBox checkBoxId;
    private javax.swing.JCheckBox checkBoxtTipo;
    private javax.swing.JCheckBox jCheckBoxEstado;
    private javax.swing.JCheckBox jCheckBoxTipo;
    private javax.swing.JDialog jDialogEdicion;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelQuery;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelDatoTipo;
    private javax.swing.JLabel lableDatoEstado;
    private javax.swing.JPanel panelSecundario;
    private javax.swing.JTable tableTramite;
    private javax.swing.JTextField textFieldCampo;
    private javax.swing.JTextField textFieldEstado;
    private javax.swing.JTextField textFieldTipo;
    // End of variables declaration//GEN-END:variables
}
