package dev.labintec.frontend.usuario.mdi;

import com.fasterxml.jackson.databind.ObjectMapper;
import dev.labintec.frontend.usuario.cliente.ClienteRequestUsuarios;
import dev.labintec.frontend.usuario.cliente.UsuarioDTO;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Interfaz gráfica interna que permite gestionar usuarios mediante operaciones CRUD.
 * Funciones incluidas:
 *  - Visualización en tabla con los usuarios existentes
 *  - Alta (POST), modificación (PUT) y eliminación (DELETE) de usuarios
 *  - Búsqueda por nombre de usuario
 * @author Quique
 */
public class IFrameUsuario extends javax.swing.JInternalFrame {

    /**
     * Creates new form FrameUsuario
     */
    public IFrameUsuario() {
        initComponents();
        cargarTabla();
        jTableUsuarios.setRowSelectionAllowed(true); // Permite seleccionar filas completas
        jTableUsuarios.setColumnSelectionAllowed(false); // Evita seleccionar columnas individualmente
        jTableUsuarios.getTableHeader().setReorderingAllowed(false); // Impide reordenar las columnas manualmente desde el encabezado
        jTableUsuarios.getColumnModel().getColumn(0).setPreferredWidth(50); // ID
        jTableUsuarios.getColumnModel().getColumn(1).setPreferredWidth(300); // Username
        jTableUsuarios.getColumnModel().getColumn(2).setPreferredWidth(300); // Email
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelTabla = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableUsuarios = new javax.swing.JTable();
        jPanelAcciones = new javax.swing.JPanel();
        jButtonNuevo = new javax.swing.JButton();
        jButtonActualizar = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();
        jButtonCerrar = new javax.swing.JButton();
        jPanelBusqueda = new javax.swing.JPanel();
        jLabelUsername = new javax.swing.JLabel();
        jTextFieldUsername = new javax.swing.JTextField();
        jButtonBuscar = new javax.swing.JButton();

        setTitle("Gestión de Usuarios");

        jPanelTabla.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Usuarios"));

        jTableUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Username", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableUsuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableUsuariosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableUsuarios);

        javax.swing.GroupLayout jPanelTablaLayout = new javax.swing.GroupLayout(jPanelTabla);
        jPanelTabla.setLayout(jPanelTablaLayout);
        jPanelTablaLayout.setHorizontalGroup(
            jPanelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTablaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanelTablaLayout.setVerticalGroup(
            jPanelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTablaLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanelAcciones.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Operaciones"));

        jButtonNuevo.setText("Nuevo...");
        jButtonNuevo.setToolTipText("Crea un nuevo usuario");
        jButtonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNuevoActionPerformed(evt);
            }
        });

        jButtonActualizar.setText("Modificar...");
        jButtonActualizar.setToolTipText("Modifica datos del usuario seleccionado de la tabla");
        jButtonActualizar.setEnabled(false);
        jButtonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActualizarActionPerformed(evt);
            }
        });

        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.setToolTipText("Elimina el usuario seleccionado de la tabla");
        jButtonEliminar.setEnabled(false);
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        jButtonCerrar.setText("Cerrar");
        jButtonCerrar.setToolTipText("Cierra la gestión de usuarios");
        jButtonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCerrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelAccionesLayout = new javax.swing.GroupLayout(jPanelAcciones);
        jPanelAcciones.setLayout(jPanelAccionesLayout);
        jPanelAccionesLayout.setHorizontalGroup(
            jPanelAccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAccionesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                .addComponent(jButtonCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelAccionesLayout.setVerticalGroup(
            jPanelAccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelAccionesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelAccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNuevo)
                    .addComponent(jButtonActualizar)
                    .addComponent(jButtonEliminar)
                    .addComponent(jButtonCerrar))
                .addContainerGap())
        );

        jPanelBusqueda.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Búsqueda"));

        jLabelUsername.setLabelFor(jTextFieldUsername);
        jLabelUsername.setText("Username");

        jButtonBuscar.setText("Buscar");
        jButtonBuscar.setToolTipText("Buscar Vacio para recargar la Tabla");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelBusquedaLayout = new javax.swing.GroupLayout(jPanelBusqueda);
        jPanelBusqueda.setLayout(jPanelBusquedaLayout);
        jPanelBusquedaLayout.setHorizontalGroup(
            jPanelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBusquedaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelUsername)
                .addGap(18, 18, 18)
                .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelBusquedaLayout.setVerticalGroup(
            jPanelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBusquedaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelUsername)
                    .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBuscar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanelTabla, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelBusqueda, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelAcciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanelBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelTabla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelAcciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Abre el diálogo de creación de usuario (modo POST).
     * Al cerrar el diálogo, se refresca la tabla de usuarios.
     */
    private void jButtonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNuevoActionPerformed
        java.awt.Frame owner = (java.awt.Frame) javax.swing.SwingUtilities.getWindowAncestor(this);
        DialogPostPutUsuario dialog = new DialogPostPutUsuario(owner, true);
        dialog.setModoPost(true); // indicar que es operación de creación
        dialog.setVisible(true);  // mostrar la ventana
        cargarTabla();            // refrescar tabla al cerrar el diálogo
    }//GEN-LAST:event_jButtonNuevoActionPerformed

    /**
     * Cierra el formulario actual.
     */
    private void jButtonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonCerrarActionPerformed

    /**
     * Elimina el usuario seleccionado en la tabla, previa confirmación.
     * Si se confirma, se invoca el endpoint DELETE y se actualiza la vista.
     */
    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        int filaSeleccionada = jTableUsuarios.getSelectedRow();
        if (filaSeleccionada != -1) {
            String username = jTableUsuarios.getValueAt(filaSeleccionada, 1).toString(); // columna 1 = username
            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Eliminar el usuario '" + username + "'?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
            if (confirmacion == JOptionPane.YES_OPTION) {
                boolean resultado = ClienteRequestUsuarios.requestDeleteUsuario(username);
                if (resultado) {
                    JOptionPane.showMessageDialog(this, "Usuario eliminado correctamente.");
                    cargarTabla(); // refresca la vista
                } else
                    JOptionPane.showMessageDialog(this, "No se pudo eliminar el usuario.");
                desactivaBotonesPutDelete();
            }
        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    /**
     * Activa los botones de modificación y eliminación cuando se hace clic sobre una fila en la tabla.
     */
    private void jTableUsuariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableUsuariosMouseClicked
        jButtonEliminar.setEnabled(true);
        jButtonActualizar.setEnabled(true);
    }//GEN-LAST:event_jTableUsuariosMouseClicked

    /**
     * Abre el diálogo en modo edición (PUT) con los datos del usuario seleccionado.
     * Al cerrar, se actualiza la tabla y se desactivan los botones de acción.
     */
    private void jButtonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActualizarActionPerformed
        int fila = jTableUsuarios.getSelectedRow();
        if (fila != -1) {
            String username = jTableUsuarios.getValueAt(fila, 1).toString(); // columna Username
            String email    = jTableUsuarios.getValueAt(fila, 2).toString(); // columna Email
            java.awt.Frame owner = (java.awt.Frame) javax.swing.SwingUtilities.getWindowAncestor(this);
            DialogPostPutUsuario dialog = new DialogPostPutUsuario(owner, true);
            dialog.setModoPost(false); // modo actualizar
            dialog.setDatosUsuario(username, email); // precarga datos
            dialog.setVisible(true);  // muestra el diálogo
            cargarTabla();            // actualiza la tabla al cerrar
            desactivaBotonesPutDelete();
        }
    }//GEN-LAST:event_jButtonActualizarActionPerformed

    /**
     * Busca un usuario por su nombre ingresado en el campo de texto.
     * Si no se encuentra, muestra un mensaje.
     * Si el campo está vacío recarga la tabla completa.
     */
    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        // 1. Obtiene el texto ingresado en el campo de búsqueda
        String username = jTextFieldUsername.getText().trim();
        // 2. Si el campo está vacío, se interpreta como "mostrar todos los usuarios"
        if (username.isEmpty()) {
            cargarTabla(); // Carga el listado completo desde el backend
            return; // Finaliza la acción
        }
        try {
            // 3. Llama al microservicio para buscar el usuario por su username
            String json = ClienteRequestUsuarios.requestReadByUsername(username);
            // 4. Verifica que la respuesta no sea nula ni vacía
            if (json != null && !json.isBlank()) {
                // 5. Deserializa el JSON recibido usando Jackson
                ObjectMapper mapper = new ObjectMapper();
                UsuarioDTO usuario = mapper.readValue(json, UsuarioDTO.class);
                // 6. Validación de datos: si el username vino vacío, no se encontró el usuario
                if (usuario.getUsername() == null || usuario.getUsername().isBlank()) {
                    JOptionPane.showMessageDialog(this, "No se encontró el usuario.");
                    return; // Sale sin mostrar la tabla
                }
                // 7. Crea un modelo de tabla para mostrar el usuario recuperado
                DefaultTableModel modelo = new DefaultTableModel();
                modelo.addColumn("ID");
                modelo.addColumn("Username");
                modelo.addColumn("Email");
                // 8. Crea una fila con los datos obtenidos
                Object[] fila = {
                    usuario.getCoduser(),
                    usuario.getUsername(),
                    usuario.getEmail()
                };
                modelo.addRow(fila); // Agrega la fila al modelo
                jTableUsuarios.setModel(modelo); // Muestra la tabla con el usuario encontrado
            }
        } catch (Exception e) {
            // 9. Si ocurre cualquier error en el proceso, se notifica al usuario
            JOptionPane.showMessageDialog(this, "Error al buscar usuario: " + e.getMessage());
        }
    }//GEN-LAST:event_jButtonBuscarActionPerformed

    /**
     * Carga todos los usuarios en la tabla llamando al endpoint GET.
     */
    private void cargarTabla() {
        try {
            // 1. Llama al backend para obtener el JSON con todos los usuarios
            String json = ClienteRequestUsuarios.requestReadAll();
            // 2. Verifica si la respuesta no fue nula
            if (json != null) {
                // 3. Instancia el mapper Jackson para convertir el JSON en objetos Java
                ObjectMapper mapper = new ObjectMapper();
                // 4. Deserializa el JSON en un arreglo de DTOs de Usuario
                UsuarioDTO[] usuarios = mapper.readValue(json, UsuarioDTO[].class);
                // 5. Crea un modelo de tabla
                DefaultTableModel modelo = new DefaultTableModel();
                // 6. Define las columnas visibles en la tabla
                modelo.addColumn("ID");
                modelo.addColumn("Username");
                modelo.addColumn("Email");
                // 7. Recorre el arreglo de usuarios y agrega cada uno como una fila
                for (UsuarioDTO usuario : usuarios) {
                    Object[] fila = new Object[] {
                        usuario.getCoduser(),     // ID del usuario
                        usuario.getUsername(),    // nombre de usuario
                        usuario.getEmail()        // email del usuario
                    };
                    modelo.addRow(fila);
                }
                // 8. Asocia el modelo armado a la tabla para mostrarlo
                jTableUsuarios.setModel(modelo);
            } else {
                // 9. Si no se recibió respuesta, informa por consola
                System.out.println("No se recibió respuesta del servidor.");
            }
        } catch (Exception e) {
            // 10. Maneja cualquier excepción durante el proceso de carga
            System.out.println("Error al cargar la tabla: " + e.getMessage());
        }
    }

    /**
     * Limpia la selección de la tabla y desactiva los botones de edición y eliminación.
     */
    private void desactivaBotonesPutDelete() {
        jTableUsuarios.clearSelection();
        jButtonEliminar.setEnabled(false);
        jButtonActualizar.setEnabled(false);
    }

    /**
     * Muestra el formulario interno de gestión de usuarios.
     */
    public void mostrar() {
        this.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonActualizar;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonCerrar;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonNuevo;
    private javax.swing.JLabel jLabelUsername;
    private javax.swing.JPanel jPanelAcciones;
    private javax.swing.JPanel jPanelBusqueda;
    private javax.swing.JPanel jPanelTabla;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableUsuarios;
    private javax.swing.JTextField jTextFieldUsername;
    // End of variables declaration//GEN-END:variables
}